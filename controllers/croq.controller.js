const RAG = require('../services/rag/rag');
const { readAllFilesFromFolder, readRandomFilesFromFolder } = require('../services/reading/reading');
const path = require('path');
require('dotenv').config();
const GROQ_API_KEY = process.env.GROQ_API_KEY;
const axios = require('axios');
const models = ['llama3-8b-8192', 'llama3-70b-8192'];

const fs = require('fs').promises;

// FUNCI√ìN 1: Preparar el sistema RAG (solo una vez)
const prepareRAG = async () => {
  console.log('üöÄ Inicializando sistema RAG...');
  //creando el sistema RAG
  const rag = new RAG();
  //inicializando el modelo de IA necesario 
  await rag.initialize();
  //procesando los documentos
  await rag.processDocuments('./docs/topics');
  return rag;
}



const start = (req, res) => {
  try {
    const htmlPath = path.join(__dirname, '../public/llama.html');
    res.sendFile(htmlPath);
  } catch (e) {
    res.status(500).send(`<h1>Error:</h1><pre>${e.toString()}</pre>`);
  }
}

const question = async (req, res) => {
  try {
    if (req.query.prompt.length === 0) throw new Error("Debe enviar un mensaje");
    const prompt = req.query.prompt;
    const chats = req.query.messages;
    //1) preparacion sistema rag
    const rag = await prepareRAG();
    //2) buscar el texto relacionado
    const { context, source } = await rag.getContext(prompt);
    console.log('contexto', context);
    console.log('fuentes', source);
    let model = models[0];
  
    const instruction = `
    ‚ö†Ô∏è INSTRUCCIONES CR√çTICAS ‚Äî SIGUE ESTAS REGLAS SIN EXCEPCI√ìN:
    - No debes mencionar archivos .txt ni hacer referencia a archivos, documentos cargados o fuentes de informaci√≥n. 
    - No digas frases como: ‚Äúseg√∫n los documentos‚Äù, ‚Äúseg√∫n el archivo‚Äù o similares. 
    - No digas que se obtuvo informaci√≥n de un documento o archivo. Responde como si ya conocieras la informaci√≥n proporcionada.
    
    üéØ OBJETIVO:
    Responder la pregunta del estudiante bas√°ndote √∫nicamente en la informaci√≥n contextual proporcionada, como si fueras un docente experto en Contabilidad de Sociedades.
    
    üìö CONTEXTO (Tu √∫nica fuente de conocimiento):
    ${context}
    
    üß† HISTORIAL DE CONVERSACI√ìN (debes tenerlo en cuenta para responder con coherencia):
    ${chats}
    
    ‚ùì PREGUNTA DEL ESTUDIANTE:
    ${prompt}
    
    üìå INSTRUCCIONES ADICIONALES:
    - Eres un asistente experto en *Contabilidad de Sociedades*.
    - Tu tono debe ser amable, claro, paciente y pedag√≥gico, como el de un buen profesor.
    - Dir√≠gete al usuario como si fuera un estudiante que busca aprender.
    - Responde de forma **precisa, concisa y educativa**.
    - Si no hay suficiente informaci√≥n en el contexto para responder bien, dilo con claridad.
    - No inventes ni especules. No uses conocimientos externos.
    - Si mencionas art√≠culos legales, cita correctamente (ej.: ‚ÄúArt√≠culo 120 del C√≥digo de Comercio de Bolivia‚Äù).
    
    ‚úçÔ∏è FORMATO DE RESPUESTA:
    Responde directamente la pregunta, explicando de manera breve, clara y did√°ctica, como si ense√±aras.
    
    üßæ COMIENZA AHORA CON LA RESPUESTA:
    `;
    

    console.time('Respuesta IA');
    const response = await axios.post(
      'https://api.groq.com/openai/v1/chat/completions',
      {
        model: model,
        messages: [
          { role: 'system', content: instruction },
          { role: 'user', content: prompt }
        ]
      },
      {
        headers: {
          'Authorization': `Bearer ${GROQ_API_KEY}`,
          'Content-Type': 'application/json'
        }
      }
    );
    console.timeEnd('Respuesta IA');
    const message = response.data.choices[0].message.content;
    res.json({ message: message, error: false });
  } catch (e) {
    console.log(e);
    res.json({ detail: e, error: true });
  }
}


const nameRoute = (numeration) => {
  switch (numeration) {
    case 1: return 'sociedades';
    case 2: return 'sociedad_anonima';
    case 3: return 'sociedad_srl';
    case 4: return 'sociedad_comandita';
    case 5: return 'sociedad_colectiva';
    case 6: return 'asociacion_accidental';
    case 7: return 'patrimonio';
    case 8: return 'disolucion_liquidacion';
    case 9: return 'transformacion_fusion';
    case 10: return 'mandato';
    case 11: return 'agencia';
    case 12: return 'sucursal';
    default:
      return '';
  }

}
const evaluation = async (req, res) => {
  try {

    if (req.query.prompt.length === 0) throw new Error("Debe enviar un mensaje");
    let model = models[0];
    const prompt = req.query.prompt;
    const topic = req.query.topic;
    const numeration = req.query.numeration;
    chatsParseados = JSON.parse(req.query.messages || '[]');
    
    const historialFormateado = chatsParseados
    .filter(chat => chat.texto && chat.tipo) // elimina los vac√≠os o incorrectos
    .map(chat => {
      return {
        role: chat.tipo === 'usuario' ? 'user' : 'assistant',
        content: chat.texto
      };
    });

    let folder =nameRoute(Number(numeration));
    const contenidoAleatorio = await readAllFilesFromFolder(folder);

    const instructionGeneral = `
    üéì Rol: Eres un asistente docente experto en *Contabilidad de Sociedades*. Eval√∫as al estudiante mediante una din√°mica conversacional clara, precisa y formativa.
    
    üîÅ Proceso conversacional:
    1. Si el estudiante solicita una pregunta (por ejemplo: "hazme una pregunta" o menciona un tema), genera **una sola pregunta** relacionada al contenido proporcionado.
    2. Espera la respuesta del estudiante.
    3. Eval√∫a si la respuesta es correcta o incorrecta, comparando con el contenido base.
    4. Brinda retroalimentaci√≥n educativa:
       - Si fue incorrecta, indica la respuesta correcta y explica por qu√©, de forma concreta y basada en el contenido.
       - Si fue correcta, refuerza con un breve comentario que reafirme el aprendizaje.
    5. Siempre finaliza preguntando: **¬øQuieres otra pregunta sobre este mismo tema?**
    6. si el usuario dice "nueva pregunta" automaticamente generas una nueva y estas a la expectativa de su respuesta.
    üß† Tipos de preguntas que puedes generar:
    - ‚úÖ Abiertas (si solo hay una respuesta concreta y clara)
    - ‚úÖ De completaci√≥n (rellenar con conceptos clave)
    - ‚úÖ De selecci√≥n m√∫ltiple (de 3 a 5 opciones):
      - Solo UNA opci√≥n debe ser la correcta.
      - Nunca digas que ‚Äúninguna es correcta‚Äù si hay una v√°lida.
      - Formato de opciones: a), b), c), d)...
    
    üìå Reglas importantes:
    - Usa **exclusivamente** el siguiente contenido como fuente de conocimiento:
    ---
    ${contenidoAleatorio}
    ---
    - No generes preguntas si el contenido no permite una respuesta objetiva y verificable.
    - No inventes datos ni temas fuera del contenido proporcionado.
    - No menciones archivos, carpetas, extensiones (.txt), ni expreses que est√°s usando contenido externo.
    - No digas que est√°s generando preguntas "al azar" o que "no tienes informaci√≥n suficiente".
    - Evita repetir preguntas ya realizadas.
    
    ‚ú≥Ô∏è Calidad esperada de las preguntas:
    - Objetivas y precisas.
    - Directamente respondibles con el contenido base.
    - Sin ambig√ºedades ni interpretaciones abiertas.
    - Sin opiniones o subjetividades, a menos que haya una √∫nica respuesta v√°lida.
    
    üìò Ejemplo de retroalimentaci√≥n:
    ‚ùå Si el estudiante responde incorrectamente:
    > Tu respuesta fue **a)**, pero la correcta era **c)**: ‚ÄúIncrementar la competitividad‚Äù. Esto se debe a que el objetivo principal de una fusi√≥n es fortalecer la posici√≥n de mercado, optimizar recursos y diversificar servicios. ¬øQuieres otra pregunta sobre este mismo tema?
    
    ‚úÖ Si el estudiante responde correctamente:
    > ¬°Correcto! Elegiste la opci√≥n **c)**, que es la adecuada seg√∫n el contenido. Este objetivo refleja el enfoque estrat√©gico de la fusi√≥n. ¬øTe gustar√≠a otra pregunta?
    
    üí° Mant√©n siempre un tono amable, profesional y motivador.
    `;
    
    
const messages = [
  { role: 'system', content: instructionGeneral },
  ...historialFormateado,
  { role: 'user', content: prompt } // nuevo input
];

    console.time('Respuesta IA');
    const response = await axios.post(
      'https://api.groq.com/openai/v1/chat/completions',
      {
        model: model,
        messages
      },
      {
        headers: {
          'Authorization': `Bearer ${GROQ_API_KEY}`,
          'Content-Type': 'application/json'
        }
      }
    );
    console.timeEnd('Respuesta IA');
    const message = response.data.choices[0].message.content;
    res.json({ message: message, error: false });
  } catch (e) {
    console.log(e)
    res.json({ detail: e, error: true });
  }
}



const nameRouteProcess = (numeration) => {
  switch (numeration) {
    case 1: return 'apertura_srl_colectiva_comandita_simple.txt';
    case 2: return 'acciones_acto_unico.txt';
    case 3: return 'acciones_suscripcion.txt';;
    default:
      return '';
  }

}

const openingProcess = async (req, res) => {
  try {
    const prompt = req.query.prompt;
    const chats = req.query.messages || '';

    if (!prompt || prompt.trim().length === 0) {
      throw new Error("Debe enviar una pregunta v√°lida.");
    }
    const rute =  '../docs/process/'+nameRouteProcess( Number(req.query.numeration));
    // Ruta del archivo TXT desde croq.controller.js
    const filePath = path.join(__dirname, rute);
    const context = await fs.readFile(filePath, 'utf-8');

    // Construcci√≥n del mensaje system
    const instruction = `
‚ö†Ô∏è INSTRUCCIONES CR√çTICAS:
- No menciones archivos ni fuentes.
- Responde como si ya conocieras esta informaci√≥n.

üéØ OBJETIVO:
Responde dudas sobre la inscripci√≥n de S.R.L., Sociedad Colectiva o en Comandita Simple en Bolivia.

üìö CONTEXTO:
${context}

üß† HISTORIAL DE CONVERSACI√ìN:
${chats}

‚ùì PREGUNTA:
${prompt}

üìå INDICACIONES ADICIONALES:
- S√© claro, preciso y pedag√≥gico.
- No inventes datos que no est√©n en el contexto.
- Si citas leyes, hazlo correctamente (ej. Art. 195 del C√≥digo de Comercio).

üßæ RESPUESTA:
`;

    // Llama al modelo (usando Groq o el que tengas configurado)
    const response = await axios.post(
      'https://api.groq.com/openai/v1/chat/completions',
      {
        model: models[0], // aseg√∫rate de que models[0] est√© definido en tu archivo
        messages: [
          { role: 'system', content: instruction },
          { role: 'user', content: prompt }
        ]
      },
      {
        headers: {
          'Authorization': `Bearer ${GROQ_API_KEY}`,
          'Content-Type': 'application/json'
        }
      }
    );

    const message = response.data.choices[0].message.content;
    res.json({ message, error: false });

  } catch (error) {
    console.error(error);
    res.status(500).json({ detail: error.message, error: true });
  }
};

module.exports = { start, question, evaluation,openingProcess};